<%- include('../partials/top') %>


<div class="container-xxl flex-grow-1 container-p-y">
   <h4 class="fw-bold py-3 mb-4">
      <!-- <span class="text-muted fw-light">Account Settings /</span> -->
      Cash Receipts
   </h4>

   <div class="row">
      <div class="col-md-12">


         <div class="card mb-4">
            <div class="card-body">
               <form action="/cash-receipts" method="post">
                  <div class="row">
                        <div class="col-md-6">
                           <div class="form-floating mb-3">
                              <input type="date" class="form-control" id="date" name="date" required>
                              <label for="date">Date</label>
                           </div>
                        </div>
                        <div class="col-md-6">
                           <div class="form-floating mb-3">
                              <input type="number" class="form-control" id="receipt-no" name="receiptNo" placeholder="Receipt No." required  value="<%- nextReceiptNo %>" min="1">
                              <label for="receipt-no">Receipt No.</label>
                           </div>
                        </div>
                        <div class="col-md-6">
                           <div class="form-floating mb-3">
                              <input type="text" id="party" name="party" class="form-control" required>
                              <label for="party">Party</label>
                           </div>
                        </div>
                        <div class="col-md-6">
                           <div class="form-floating mb-3">
                              <input type="number" class="form-control" id="amount" name="amount" placeholder="Amount" required min="0" step="0.01">
                              <label for="amount">Amount</label>
                           </div>
                        </div>
                        <div class="col-md-6">
                           <div class="form-floating mb-3">
                              <input type="number" class="form-control" id="discount" name="discount" placeholder="Discount" min="0" step="0.01">
                              <label for="discount">Discount</label>
                           </div>
                        </div>
                  </div>
                  <div class="col-12 mt-1" style="display: flex; justify-content: end;">
                     <button type="reset" class="btn btn-label-secondary" style="margin-right:20px">Cancel</button>
                     <button type="submit" class="btn btn-primary me-2">Save changes</button>
                  </div>
               </form>
               
               <script>
                  // Set today's date as the default value for the date input
                  document.addEventListener('DOMContentLoaded', (event) => {
                     //  const today = new Date().toISOString().split('T')[0];
                     // timezone india
                     const today = new Date().toLocaleString('en-CA').split(',')[0];
                        document.getElementById("date").value = today;

                     const time = new Date().toLocaleString('en-CA').split(',')[1];
                  });
               </script>
               
               
            </div>
         </div>

      </div>
      <!--/ Change Password -->




   </div>
</div>


<%- include('../partials/bottom') %>

   <script>
      (async () => {

         const url = "/cmpl";
         const response = await fetch(url);
         const json = await response.json();
         // for each object in json array, take out C_NAME as name and C_CODE as email
         let usersList = json.map(user => ({
            name: user.C_NAME,
            title: user.C_NAME,
            email: user.C_CODE,
            Email: user.C_CODE,
            value: user.C_CODE,
            // balanceL: user.balance,
            avatar: "/assets/img/avatars/3.png"
         }));




         usersList = usersList.filter(user => user.name && user.email);
         usersList = usersList.slice(2);

         // just keep the keys name,title,email,Email,avatar from each obj in userlist


         const TagifyUserListEl = document.querySelector("#party");


         function tagTemplate(tagData) {
            return `
         <tag title="${tagData.title || tagData.email}"
         contenteditable='false'
         spellcheck='false'
         tabIndex="-1"
         class="${this.settings.classNames.tag} ${tagData.class ? tagData.class : ''}"
         ${this.getAttributes(tagData)}
         >
         <x title='' class='tagify__tag__removeBtn' role='button' aria-label='remove tag'></x>
         <div>
            <div class='tagify__tag__avatar-wrap'>
               <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
            </div>
            <span class='tagify__tag-text'>${tagData.name} ${tagData.name}</span>
         </div>
         </tag>
         `;
         }

         function suggestionItemTemplate(tagData) {
            return `
         <div ${this.getAttributes(tagData)}
         class='tagify__dropdown__item align-items-center ${tagData.class ? tagData.class : ''}'
         tabindex="0"
         role="option"
         >
         ${tagData.avatar ?
                  `<div class='tagify__dropdown__item__avatar-wrap'>
               <img onerror="this.style.visibility='hidden'" src="${tagData.avatar}">
            </div>`
                  : ''
               }
         <strong>${tagData.name}</strong>
         <span>${tagData.email}</span>
         </div>
         `;
         }

         // initialize Tagify on the above input node reference
         let TagifyUserList = new Tagify(TagifyUserListEl, {
            // mode:"select",
            tagTextProp: "name", // very important since a custom template is used with this property as text. allows typing a "value" or a "name" to match input with whitelist
            enforceWhitelist: true,
            maxTags: 1,
            skipInvalid: true, // do not remporarily add invalid tags
            maxTags: 1,
            dropdown: {
               closeOnSelect: true,
               enabled: 0,
               classname: "users-list",
               searchKeys: ["name", "email"] // very important to set by which keys to search for suggesttions when typing
            },
            templates: {
               tag: tagTemplate,
               dropdownItem: suggestionItemTemplate
            },
            whitelist: usersList
         });

         TagifyUserList.on("dropdown:show dropdown:updated", onDropdownShow);
         TagifyUserList.on("dropdown:select", onSelectSuggestion);

         let addAllSuggestionsEl;

         function onDropdownShow(e) {
            let dropdownContentEl = e.detail.tagify.DOM.dropdown.content;

            if (TagifyUserList.suggestedListItems.length > 1) {
               addAllSuggestionsEl = getAddAllSuggestionsEl();

               // insert "addAllSuggestionsEl" as the first element in the suggestions list
               dropdownContentEl.insertBefore(addAllSuggestionsEl, dropdownContentEl.firstChild);
            }
         }

         function onSelectSuggestion(e) {
            if (e.detail.elm == addAllSuggestionsEl) TagifyUserList.dropdown.selectAll.call(TagifyUserList);
         }

        

         function submit() {
            TagifyUserList.value.forEach(element => {
               changepassword(element.value);
            });
         }

     


      })()
   


   </script>



</body>

</html>